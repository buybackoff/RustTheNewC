/* automatically generated by rust-bindgen */

pub type va_list = __builtin_va_list;
extern "C" {
    pub fn sqlite3_libversion() -> *const libc::c_char;
}
extern "C" {
    pub fn sqlite3_sourceid() -> *const libc::c_char;
}
extern "C" {
    pub fn sqlite3_libversion_number() -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_compileoption_used(zOptName: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_compileoption_get(N: libc::c_int) -> *const libc::c_char;
}
extern "C" {
    pub fn sqlite3_threadsafe() -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3 {
    _unused: [u8; 0],
}
pub type sqlite_int64 = libc::c_longlong;
pub type sqlite_uint64 = libc::c_ulonglong;
pub type sqlite3_int64 = sqlite_int64;
pub type sqlite3_uint64 = sqlite_uint64;
extern "C" {
    pub fn sqlite3_close(arg1: *mut sqlite3) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_close_v2(arg1: *mut sqlite3) -> libc::c_int;
}
pub type sqlite3_callback = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut libc::c_void,
        arg2: libc::c_int,
        arg3: *mut *mut libc::c_char,
        arg4: *mut *mut libc::c_char,
    ) -> libc::c_int,
>;
extern "C" {
    pub fn sqlite3_exec(
        arg1: *mut sqlite3,
        sql: *const libc::c_char,
        callback: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut libc::c_void,
                arg2: libc::c_int,
                arg3: *mut *mut libc::c_char,
                arg4: *mut *mut libc::c_char,
            ) -> libc::c_int,
        >,
        arg2: *mut libc::c_void,
        errmsg: *mut *mut libc::c_char,
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_file {
    pub pMethods: *const sqlite3_io_methods,
}
#[test]
fn bindgen_test_layout_sqlite3_file() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_file>(),
        8usize,
        concat!("Size of: ", stringify!(sqlite3_file))
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_file>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_file))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_file>())).pMethods as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_file),
            "::",
            stringify!(pMethods)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_io_methods {
    pub iVersion: libc::c_int,
    pub xClose:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_file) -> libc::c_int>,
    pub xRead: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            arg2: *mut libc::c_void,
            iAmt: libc::c_int,
            iOfst: sqlite3_int64,
        ) -> libc::c_int,
    >,
    pub xWrite: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            arg2: *const libc::c_void,
            iAmt: libc::c_int,
            iOfst: sqlite3_int64,
        ) -> libc::c_int,
    >,
    pub xTruncate: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_file, size: sqlite3_int64) -> libc::c_int,
    >,
    pub xSync: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_file, flags: libc::c_int) -> libc::c_int,
    >,
    pub xFileSize: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_file, pSize: *mut sqlite3_int64) -> libc::c_int,
    >,
    pub xLock: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_file, arg2: libc::c_int) -> libc::c_int,
    >,
    pub xUnlock: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_file, arg2: libc::c_int) -> libc::c_int,
    >,
    pub xCheckReservedLock: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_file, pResOut: *mut libc::c_int) -> libc::c_int,
    >,
    pub xFileControl: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            op: libc::c_int,
            pArg: *mut libc::c_void,
        ) -> libc::c_int,
    >,
    pub xSectorSize:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_file) -> libc::c_int>,
    pub xDeviceCharacteristics:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_file) -> libc::c_int>,
    pub xShmMap: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            iPg: libc::c_int,
            pgsz: libc::c_int,
            arg2: libc::c_int,
            arg3: *mut *mut libc::c_void,
        ) -> libc::c_int,
    >,
    pub xShmLock: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            offset: libc::c_int,
            n: libc::c_int,
            flags: libc::c_int,
        ) -> libc::c_int,
    >,
    pub xShmBarrier: ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_file)>,
    pub xShmUnmap: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_file, deleteFlag: libc::c_int) -> libc::c_int,
    >,
    pub xFetch: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            iOfst: sqlite3_int64,
            iAmt: libc::c_int,
            pp: *mut *mut libc::c_void,
        ) -> libc::c_int,
    >,
    pub xUnfetch: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            iOfst: sqlite3_int64,
            p: *mut libc::c_void,
        ) -> libc::c_int,
    >,
}
#[test]
fn bindgen_test_layout_sqlite3_io_methods() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_io_methods>(),
        152usize,
        concat!("Size of: ", stringify!(sqlite3_io_methods))
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_io_methods>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_io_methods))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_io_methods>())).iVersion as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(iVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_io_methods>())).xClose as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xClose)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_io_methods>())).xRead as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xRead)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_io_methods>())).xWrite as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xWrite)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_io_methods>())).xTruncate as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xTruncate)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_io_methods>())).xSync as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xSync)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_io_methods>())).xFileSize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xFileSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_io_methods>())).xLock as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xLock)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_io_methods>())).xUnlock as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xUnlock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_io_methods>())).xCheckReservedLock as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xCheckReservedLock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_io_methods>())).xFileControl as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xFileControl)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_io_methods>())).xSectorSize as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xSectorSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_io_methods>())).xDeviceCharacteristics as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xDeviceCharacteristics)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_io_methods>())).xShmMap as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xShmMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_io_methods>())).xShmLock as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xShmLock)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_io_methods>())).xShmBarrier as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xShmBarrier)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_io_methods>())).xShmUnmap as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xShmUnmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_io_methods>())).xFetch as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xFetch)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_io_methods>())).xUnfetch as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_io_methods),
            "::",
            stringify!(xUnfetch)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_mutex {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_api_routines {
    _unused: [u8; 0],
}
pub type sqlite3_syscall_ptr = ::core::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_vfs {
    pub iVersion: libc::c_int,
    pub szOsFile: libc::c_int,
    pub mxPathname: libc::c_int,
    pub pNext: *mut sqlite3_vfs,
    pub zName: *const libc::c_char,
    pub pAppData: *mut libc::c_void,
    pub xOpen: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            zName: *const libc::c_char,
            arg2: *mut sqlite3_file,
            flags: libc::c_int,
            pOutFlags: *mut libc::c_int,
        ) -> libc::c_int,
    >,
    pub xDelete: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            zName: *const libc::c_char,
            syncDir: libc::c_int,
        ) -> libc::c_int,
    >,
    pub xAccess: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            zName: *const libc::c_char,
            flags: libc::c_int,
            pResOut: *mut libc::c_int,
        ) -> libc::c_int,
    >,
    pub xFullPathname: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            zName: *const libc::c_char,
            nOut: libc::c_int,
            zOut: *mut libc::c_char,
        ) -> libc::c_int,
    >,
    pub xDlOpen: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            zFilename: *const libc::c_char,
        ) -> *mut libc::c_void,
    >,
    pub xDlError: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            nByte: libc::c_int,
            zErrMsg: *mut libc::c_char,
        ),
    >,
    pub xDlSym: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            arg2: *mut libc::c_void,
            zSymbol: *const libc::c_char,
        ) -> ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut sqlite3_vfs,
                arg2: *mut libc::c_void,
                zSymbol: *const libc::c_char,
            ),
        >,
    >,
    pub xDlClose: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_vfs, arg2: *mut libc::c_void),
    >,
    pub xRandomness: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            nByte: libc::c_int,
            zOut: *mut libc::c_char,
        ) -> libc::c_int,
    >,
    pub xSleep: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_vfs, microseconds: libc::c_int) -> libc::c_int,
    >,
    pub xCurrentTime: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_vfs, arg2: *mut f64) -> libc::c_int,
    >,
    pub xGetLastError: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            arg2: libc::c_int,
            arg3: *mut libc::c_char,
        ) -> libc::c_int,
    >,
    pub xCurrentTimeInt64: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_vfs, arg2: *mut sqlite3_int64) -> libc::c_int,
    >,
    pub xSetSystemCall: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            zName: *const libc::c_char,
            arg2: sqlite3_syscall_ptr,
        ) -> libc::c_int,
    >,
    pub xGetSystemCall: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            zName: *const libc::c_char,
        ) -> sqlite3_syscall_ptr,
    >,
    pub xNextSystemCall: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            zName: *const libc::c_char,
        ) -> *const libc::c_char,
    >,
}
#[test]
fn bindgen_test_layout_sqlite3_vfs() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_vfs>(),
        168usize,
        concat!("Size of: ", stringify!(sqlite3_vfs))
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_vfs>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_vfs))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).iVersion as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(iVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).szOsFile as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(szOsFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).mxPathname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(mxPathname)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).pNext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).zName as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(zName)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).pAppData as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(pAppData)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).xOpen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(xOpen)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).xDelete as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(xDelete)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).xAccess as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(xAccess)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).xFullPathname as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(xFullPathname)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).xDlOpen as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(xDlOpen)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).xDlError as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(xDlError)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).xDlSym as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(xDlSym)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).xDlClose as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(xDlClose)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).xRandomness as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(xRandomness)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).xSleep as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(xSleep)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).xCurrentTime as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(xCurrentTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).xGetLastError as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(xGetLastError)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).xCurrentTimeInt64 as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(xCurrentTimeInt64)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).xSetSystemCall as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(xSetSystemCall)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).xGetSystemCall as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(xGetSystemCall)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vfs>())).xNextSystemCall as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vfs),
            "::",
            stringify!(xNextSystemCall)
        )
    );
}
extern "C" {
    pub fn sqlite3_initialize() -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_shutdown() -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_os_init() -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_os_end() -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_config(arg1: libc::c_int, ...) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_db_config(arg1: *mut sqlite3, op: libc::c_int, ...) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_mem_methods {
    pub xMalloc:
        ::core::option::Option<unsafe extern "C" fn(arg1: libc::c_int) -> *mut libc::c_void>,
    pub xFree: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    pub xRealloc: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut libc::c_void, arg2: libc::c_int) -> *mut libc::c_void,
    >,
    pub xSize: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void) -> libc::c_int>,
    pub xRoundup: ::core::option::Option<unsafe extern "C" fn(arg1: libc::c_int) -> libc::c_int>,
    pub xInit: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void) -> libc::c_int>,
    pub xShutdown: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    pub pAppData: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout_sqlite3_mem_methods() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_mem_methods>(),
        64usize,
        concat!("Size of: ", stringify!(sqlite3_mem_methods))
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_mem_methods>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_mem_methods))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_mem_methods>())).xMalloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mem_methods),
            "::",
            stringify!(xMalloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_mem_methods>())).xFree as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mem_methods),
            "::",
            stringify!(xFree)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_mem_methods>())).xRealloc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mem_methods),
            "::",
            stringify!(xRealloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_mem_methods>())).xSize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mem_methods),
            "::",
            stringify!(xSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_mem_methods>())).xRoundup as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mem_methods),
            "::",
            stringify!(xRoundup)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_mem_methods>())).xInit as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mem_methods),
            "::",
            stringify!(xInit)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_mem_methods>())).xShutdown as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mem_methods),
            "::",
            stringify!(xShutdown)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_mem_methods>())).pAppData as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mem_methods),
            "::",
            stringify!(pAppData)
        )
    );
}
extern "C" {
    pub fn sqlite3_extended_result_codes(arg1: *mut sqlite3, onoff: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_last_insert_rowid(arg1: *mut sqlite3) -> sqlite3_int64;
}
extern "C" {
    pub fn sqlite3_set_last_insert_rowid(arg1: *mut sqlite3, arg2: sqlite3_int64);
}
extern "C" {
    pub fn sqlite3_changes(arg1: *mut sqlite3) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_total_changes(arg1: *mut sqlite3) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_interrupt(arg1: *mut sqlite3);
}
extern "C" {
    pub fn sqlite3_complete(sql: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_complete16(sql: *const libc::c_void) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_busy_handler(
        arg1: *mut sqlite3,
        arg2: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut libc::c_void, arg2: libc::c_int) -> libc::c_int,
        >,
        arg3: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_busy_timeout(arg1: *mut sqlite3, ms: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_get_table(
        db: *mut sqlite3,
        zSql: *const libc::c_char,
        pazResult: *mut *mut *mut libc::c_char,
        pnRow: *mut libc::c_int,
        pnColumn: *mut libc::c_int,
        pzErrmsg: *mut *mut libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_free_table(result: *mut *mut libc::c_char);
}
extern "C" {
    pub fn sqlite3_mprintf(arg1: *const libc::c_char, ...) -> *mut libc::c_char;
}
extern "C" {
    pub fn sqlite3_vmprintf(arg1: *const libc::c_char, arg2: va_list) -> *mut libc::c_char;
}
extern "C" {
    pub fn sqlite3_snprintf(
        arg1: libc::c_int,
        arg2: *mut libc::c_char,
        arg3: *const libc::c_char,
        ...
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn sqlite3_vsnprintf(
        arg1: libc::c_int,
        arg2: *mut libc::c_char,
        arg3: *const libc::c_char,
        arg4: va_list,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn sqlite3_malloc(arg1: libc::c_int) -> *mut libc::c_void;
}
extern "C" {
    pub fn sqlite3_malloc64(arg1: sqlite3_uint64) -> *mut libc::c_void;
}
extern "C" {
    pub fn sqlite3_realloc(arg1: *mut libc::c_void, arg2: libc::c_int) -> *mut libc::c_void;
}
extern "C" {
    pub fn sqlite3_realloc64(arg1: *mut libc::c_void, arg2: sqlite3_uint64) -> *mut libc::c_void;
}
extern "C" {
    pub fn sqlite3_free(arg1: *mut libc::c_void);
}
extern "C" {
    pub fn sqlite3_msize(arg1: *mut libc::c_void) -> sqlite3_uint64;
}
extern "C" {
    pub fn sqlite3_memory_used() -> sqlite3_int64;
}
extern "C" {
    pub fn sqlite3_memory_highwater(resetFlag: libc::c_int) -> sqlite3_int64;
}
extern "C" {
    pub fn sqlite3_randomness(N: libc::c_int, P: *mut libc::c_void);
}
extern "C" {
    pub fn sqlite3_set_authorizer(
        arg1: *mut sqlite3,
        xAuth: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut libc::c_void,
                arg2: libc::c_int,
                arg3: *const libc::c_char,
                arg4: *const libc::c_char,
                arg5: *const libc::c_char,
                arg6: *const libc::c_char,
            ) -> libc::c_int,
        >,
        pUserData: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_trace(
        arg1: *mut sqlite3,
        xTrace: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut libc::c_void, arg2: *const libc::c_char),
        >,
        arg2: *mut libc::c_void,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn sqlite3_profile(
        arg1: *mut sqlite3,
        xProfile: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut libc::c_void,
                arg2: *const libc::c_char,
                arg3: sqlite3_uint64,
            ),
        >,
        arg2: *mut libc::c_void,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn sqlite3_trace_v2(
        arg1: *mut sqlite3,
        uMask: libc::c_uint,
        xCallback: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: libc::c_uint,
                arg2: *mut libc::c_void,
                arg3: *mut libc::c_void,
                arg4: *mut libc::c_void,
            ) -> libc::c_int,
        >,
        pCtx: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_progress_handler(
        arg1: *mut sqlite3,
        arg2: libc::c_int,
        arg3: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void) -> libc::c_int>,
        arg4: *mut libc::c_void,
    );
}
extern "C" {
    pub fn sqlite3_open(filename: *const libc::c_char, ppDb: *mut *mut sqlite3) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_open16(filename: *const libc::c_void, ppDb: *mut *mut sqlite3) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_open_v2(
        filename: *const libc::c_char,
        ppDb: *mut *mut sqlite3,
        flags: libc::c_int,
        zVfs: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_uri_parameter(
        zFilename: *const libc::c_char,
        zParam: *const libc::c_char,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn sqlite3_uri_boolean(
        zFile: *const libc::c_char,
        zParam: *const libc::c_char,
        bDefault: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_uri_int64(
        arg1: *const libc::c_char,
        arg2: *const libc::c_char,
        arg3: sqlite3_int64,
    ) -> sqlite3_int64;
}
extern "C" {
    pub fn sqlite3_errcode(db: *mut sqlite3) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_extended_errcode(db: *mut sqlite3) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_errmsg(arg1: *mut sqlite3) -> *const libc::c_char;
}
extern "C" {
    pub fn sqlite3_errmsg16(arg1: *mut sqlite3) -> *const libc::c_void;
}
extern "C" {
    pub fn sqlite3_errstr(arg1: libc::c_int) -> *const libc::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_stmt {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sqlite3_limit(arg1: *mut sqlite3, id: libc::c_int, newVal: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_prepare(
        db: *mut sqlite3,
        zSql: *const libc::c_char,
        nByte: libc::c_int,
        ppStmt: *mut *mut sqlite3_stmt,
        pzTail: *mut *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_prepare_v2(
        db: *mut sqlite3,
        zSql: *const libc::c_char,
        nByte: libc::c_int,
        ppStmt: *mut *mut sqlite3_stmt,
        pzTail: *mut *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_prepare_v3(
        db: *mut sqlite3,
        zSql: *const libc::c_char,
        nByte: libc::c_int,
        prepFlags: libc::c_uint,
        ppStmt: *mut *mut sqlite3_stmt,
        pzTail: *mut *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_prepare16(
        db: *mut sqlite3,
        zSql: *const libc::c_void,
        nByte: libc::c_int,
        ppStmt: *mut *mut sqlite3_stmt,
        pzTail: *mut *const libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_prepare16_v2(
        db: *mut sqlite3,
        zSql: *const libc::c_void,
        nByte: libc::c_int,
        ppStmt: *mut *mut sqlite3_stmt,
        pzTail: *mut *const libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_prepare16_v3(
        db: *mut sqlite3,
        zSql: *const libc::c_void,
        nByte: libc::c_int,
        prepFlags: libc::c_uint,
        ppStmt: *mut *mut sqlite3_stmt,
        pzTail: *mut *const libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_sql(pStmt: *mut sqlite3_stmt) -> *const libc::c_char;
}
extern "C" {
    pub fn sqlite3_expanded_sql(pStmt: *mut sqlite3_stmt) -> *mut libc::c_char;
}
extern "C" {
    pub fn sqlite3_normalized_sql(pStmt: *mut sqlite3_stmt) -> *const libc::c_char;
}
extern "C" {
    pub fn sqlite3_stmt_readonly(pStmt: *mut sqlite3_stmt) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_stmt_isexplain(pStmt: *mut sqlite3_stmt) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_stmt_busy(arg1: *mut sqlite3_stmt) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_value {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_context {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sqlite3_bind_blob(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
        arg3: *const libc::c_void,
        n: libc::c_int,
        arg4: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_bind_blob64(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
        arg3: *const libc::c_void,
        arg4: sqlite3_uint64,
        arg5: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_bind_double(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
        arg3: f64,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_bind_int(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
        arg3: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_bind_int64(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
        arg3: sqlite3_int64,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_bind_null(arg1: *mut sqlite3_stmt, arg2: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_bind_text(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
        arg3: *const libc::c_char,
        arg4: libc::c_int,
        arg5: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_bind_text16(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
        arg3: *const libc::c_void,
        arg4: libc::c_int,
        arg5: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_bind_text64(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
        arg3: *const libc::c_char,
        arg4: sqlite3_uint64,
        arg5: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        encoding: libc::c_uchar,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_bind_value(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
        arg3: *const sqlite3_value,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_bind_pointer(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
        arg3: *mut libc::c_void,
        arg4: *const libc::c_char,
        arg5: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_bind_zeroblob(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
        n: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_bind_zeroblob64(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
        arg3: sqlite3_uint64,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_bind_parameter_count(arg1: *mut sqlite3_stmt) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_bind_parameter_name(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn sqlite3_bind_parameter_index(
        arg1: *mut sqlite3_stmt,
        zName: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_clear_bindings(arg1: *mut sqlite3_stmt) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_column_count(pStmt: *mut sqlite3_stmt) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_column_name(arg1: *mut sqlite3_stmt, N: libc::c_int) -> *const libc::c_char;
}
extern "C" {
    pub fn sqlite3_column_name16(arg1: *mut sqlite3_stmt, N: libc::c_int) -> *const libc::c_void;
}
extern "C" {
    pub fn sqlite3_column_database_name(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn sqlite3_column_database_name16(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
    ) -> *const libc::c_void;
}
extern "C" {
    pub fn sqlite3_column_table_name(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn sqlite3_column_table_name16(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
    ) -> *const libc::c_void;
}
extern "C" {
    pub fn sqlite3_column_origin_name(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn sqlite3_column_origin_name16(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
    ) -> *const libc::c_void;
}
extern "C" {
    pub fn sqlite3_column_decltype(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn sqlite3_column_decltype16(
        arg1: *mut sqlite3_stmt,
        arg2: libc::c_int,
    ) -> *const libc::c_void;
}
extern "C" {
    pub fn sqlite3_step(arg1: *mut sqlite3_stmt) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_data_count(pStmt: *mut sqlite3_stmt) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_column_blob(arg1: *mut sqlite3_stmt, iCol: libc::c_int) -> *const libc::c_void;
}
extern "C" {
    pub fn sqlite3_column_double(arg1: *mut sqlite3_stmt, iCol: libc::c_int) -> f64;
}
extern "C" {
    pub fn sqlite3_column_int(arg1: *mut sqlite3_stmt, iCol: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_column_int64(arg1: *mut sqlite3_stmt, iCol: libc::c_int) -> sqlite3_int64;
}
extern "C" {
    pub fn sqlite3_column_text(arg1: *mut sqlite3_stmt, iCol: libc::c_int) -> *const libc::c_uchar;
}
extern "C" {
    pub fn sqlite3_column_text16(arg1: *mut sqlite3_stmt, iCol: libc::c_int)
        -> *const libc::c_void;
}
extern "C" {
    pub fn sqlite3_column_value(arg1: *mut sqlite3_stmt, iCol: libc::c_int) -> *mut sqlite3_value;
}
extern "C" {
    pub fn sqlite3_column_bytes(arg1: *mut sqlite3_stmt, iCol: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_column_bytes16(arg1: *mut sqlite3_stmt, iCol: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_column_type(arg1: *mut sqlite3_stmt, iCol: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_finalize(pStmt: *mut sqlite3_stmt) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_reset(pStmt: *mut sqlite3_stmt) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_create_function(
        db: *mut sqlite3,
        zFunctionName: *const libc::c_char,
        nArg: libc::c_int,
        eTextRep: libc::c_int,
        pApp: *mut libc::c_void,
        xFunc: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut sqlite3_context,
                arg2: libc::c_int,
                arg3: *mut *mut sqlite3_value,
            ),
        >,
        xStep: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut sqlite3_context,
                arg2: libc::c_int,
                arg3: *mut *mut sqlite3_value,
            ),
        >,
        xFinal: ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_create_function16(
        db: *mut sqlite3,
        zFunctionName: *const libc::c_void,
        nArg: libc::c_int,
        eTextRep: libc::c_int,
        pApp: *mut libc::c_void,
        xFunc: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut sqlite3_context,
                arg2: libc::c_int,
                arg3: *mut *mut sqlite3_value,
            ),
        >,
        xStep: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut sqlite3_context,
                arg2: libc::c_int,
                arg3: *mut *mut sqlite3_value,
            ),
        >,
        xFinal: ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_create_function_v2(
        db: *mut sqlite3,
        zFunctionName: *const libc::c_char,
        nArg: libc::c_int,
        eTextRep: libc::c_int,
        pApp: *mut libc::c_void,
        xFunc: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut sqlite3_context,
                arg2: libc::c_int,
                arg3: *mut *mut sqlite3_value,
            ),
        >,
        xStep: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut sqlite3_context,
                arg2: libc::c_int,
                arg3: *mut *mut sqlite3_value,
            ),
        >,
        xFinal: ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>,
        xDestroy: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_create_window_function(
        db: *mut sqlite3,
        zFunctionName: *const libc::c_char,
        nArg: libc::c_int,
        eTextRep: libc::c_int,
        pApp: *mut libc::c_void,
        xStep: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut sqlite3_context,
                arg2: libc::c_int,
                arg3: *mut *mut sqlite3_value,
            ),
        >,
        xFinal: ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>,
        xValue: ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>,
        xInverse: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut sqlite3_context,
                arg2: libc::c_int,
                arg3: *mut *mut sqlite3_value,
            ),
        >,
        xDestroy: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_aggregate_count(arg1: *mut sqlite3_context) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_expired(arg1: *mut sqlite3_stmt) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_transfer_bindings(
        arg1: *mut sqlite3_stmt,
        arg2: *mut sqlite3_stmt,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_global_recover() -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_thread_cleanup();
}
extern "C" {
    pub fn sqlite3_memory_alarm(
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut libc::c_void, arg2: sqlite3_int64, arg3: libc::c_int),
        >,
        arg2: *mut libc::c_void,
        arg3: sqlite3_int64,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_value_blob(arg1: *mut sqlite3_value) -> *const libc::c_void;
}
extern "C" {
    pub fn sqlite3_value_double(arg1: *mut sqlite3_value) -> f64;
}
extern "C" {
    pub fn sqlite3_value_int(arg1: *mut sqlite3_value) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_value_int64(arg1: *mut sqlite3_value) -> sqlite3_int64;
}
extern "C" {
    pub fn sqlite3_value_pointer(
        arg1: *mut sqlite3_value,
        arg2: *const libc::c_char,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn sqlite3_value_text(arg1: *mut sqlite3_value) -> *const libc::c_uchar;
}
extern "C" {
    pub fn sqlite3_value_text16(arg1: *mut sqlite3_value) -> *const libc::c_void;
}
extern "C" {
    pub fn sqlite3_value_text16le(arg1: *mut sqlite3_value) -> *const libc::c_void;
}
extern "C" {
    pub fn sqlite3_value_text16be(arg1: *mut sqlite3_value) -> *const libc::c_void;
}
extern "C" {
    pub fn sqlite3_value_bytes(arg1: *mut sqlite3_value) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_value_bytes16(arg1: *mut sqlite3_value) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_value_type(arg1: *mut sqlite3_value) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_value_numeric_type(arg1: *mut sqlite3_value) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_value_nochange(arg1: *mut sqlite3_value) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_value_frombind(arg1: *mut sqlite3_value) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_value_subtype(arg1: *mut sqlite3_value) -> libc::c_uint;
}
extern "C" {
    pub fn sqlite3_value_dup(arg1: *const sqlite3_value) -> *mut sqlite3_value;
}
extern "C" {
    pub fn sqlite3_value_free(arg1: *mut sqlite3_value);
}
extern "C" {
    pub fn sqlite3_aggregate_context(
        arg1: *mut sqlite3_context,
        nBytes: libc::c_int,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn sqlite3_user_data(arg1: *mut sqlite3_context) -> *mut libc::c_void;
}
extern "C" {
    pub fn sqlite3_context_db_handle(arg1: *mut sqlite3_context) -> *mut sqlite3;
}
extern "C" {
    pub fn sqlite3_get_auxdata(arg1: *mut sqlite3_context, N: libc::c_int) -> *mut libc::c_void;
}
extern "C" {
    pub fn sqlite3_set_auxdata(
        arg1: *mut sqlite3_context,
        N: libc::c_int,
        arg2: *mut libc::c_void,
        arg3: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
}
pub type sqlite3_destructor_type =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>;
extern "C" {
    pub fn sqlite3_result_blob(
        arg1: *mut sqlite3_context,
        arg2: *const libc::c_void,
        arg3: libc::c_int,
        arg4: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
}
extern "C" {
    pub fn sqlite3_result_blob64(
        arg1: *mut sqlite3_context,
        arg2: *const libc::c_void,
        arg3: sqlite3_uint64,
        arg4: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
}
extern "C" {
    pub fn sqlite3_result_double(arg1: *mut sqlite3_context, arg2: f64);
}
extern "C" {
    pub fn sqlite3_result_error(
        arg1: *mut sqlite3_context,
        arg2: *const libc::c_char,
        arg3: libc::c_int,
    );
}
extern "C" {
    pub fn sqlite3_result_error16(
        arg1: *mut sqlite3_context,
        arg2: *const libc::c_void,
        arg3: libc::c_int,
    );
}
extern "C" {
    pub fn sqlite3_result_error_toobig(arg1: *mut sqlite3_context);
}
extern "C" {
    pub fn sqlite3_result_error_nomem(arg1: *mut sqlite3_context);
}
extern "C" {
    pub fn sqlite3_result_error_code(arg1: *mut sqlite3_context, arg2: libc::c_int);
}
extern "C" {
    pub fn sqlite3_result_int(arg1: *mut sqlite3_context, arg2: libc::c_int);
}
extern "C" {
    pub fn sqlite3_result_int64(arg1: *mut sqlite3_context, arg2: sqlite3_int64);
}
extern "C" {
    pub fn sqlite3_result_null(arg1: *mut sqlite3_context);
}
extern "C" {
    pub fn sqlite3_result_text(
        arg1: *mut sqlite3_context,
        arg2: *const libc::c_char,
        arg3: libc::c_int,
        arg4: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
}
extern "C" {
    pub fn sqlite3_result_text64(
        arg1: *mut sqlite3_context,
        arg2: *const libc::c_char,
        arg3: sqlite3_uint64,
        arg4: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        encoding: libc::c_uchar,
    );
}
extern "C" {
    pub fn sqlite3_result_text16(
        arg1: *mut sqlite3_context,
        arg2: *const libc::c_void,
        arg3: libc::c_int,
        arg4: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
}
extern "C" {
    pub fn sqlite3_result_text16le(
        arg1: *mut sqlite3_context,
        arg2: *const libc::c_void,
        arg3: libc::c_int,
        arg4: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
}
extern "C" {
    pub fn sqlite3_result_text16be(
        arg1: *mut sqlite3_context,
        arg2: *const libc::c_void,
        arg3: libc::c_int,
        arg4: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
}
extern "C" {
    pub fn sqlite3_result_value(arg1: *mut sqlite3_context, arg2: *mut sqlite3_value);
}
extern "C" {
    pub fn sqlite3_result_pointer(
        arg1: *mut sqlite3_context,
        arg2: *mut libc::c_void,
        arg3: *const libc::c_char,
        arg4: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
}
extern "C" {
    pub fn sqlite3_result_zeroblob(arg1: *mut sqlite3_context, n: libc::c_int);
}
extern "C" {
    pub fn sqlite3_result_zeroblob64(arg1: *mut sqlite3_context, n: sqlite3_uint64) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_result_subtype(arg1: *mut sqlite3_context, arg2: libc::c_uint);
}
extern "C" {
    pub fn sqlite3_create_collation(
        arg1: *mut sqlite3,
        zName: *const libc::c_char,
        eTextRep: libc::c_int,
        pArg: *mut libc::c_void,
        xCompare: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut libc::c_void,
                arg2: libc::c_int,
                arg3: *const libc::c_void,
                arg4: libc::c_int,
                arg5: *const libc::c_void,
            ) -> libc::c_int,
        >,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_create_collation_v2(
        arg1: *mut sqlite3,
        zName: *const libc::c_char,
        eTextRep: libc::c_int,
        pArg: *mut libc::c_void,
        xCompare: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut libc::c_void,
                arg2: libc::c_int,
                arg3: *const libc::c_void,
                arg4: libc::c_int,
                arg5: *const libc::c_void,
            ) -> libc::c_int,
        >,
        xDestroy: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_create_collation16(
        arg1: *mut sqlite3,
        zName: *const libc::c_void,
        eTextRep: libc::c_int,
        pArg: *mut libc::c_void,
        xCompare: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut libc::c_void,
                arg2: libc::c_int,
                arg3: *const libc::c_void,
                arg4: libc::c_int,
                arg5: *const libc::c_void,
            ) -> libc::c_int,
        >,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_collation_needed(
        arg1: *mut sqlite3,
        arg2: *mut libc::c_void,
        arg3: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut libc::c_void,
                arg2: *mut sqlite3,
                eTextRep: libc::c_int,
                arg3: *const libc::c_char,
            ),
        >,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_collation_needed16(
        arg1: *mut sqlite3,
        arg2: *mut libc::c_void,
        arg3: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut libc::c_void,
                arg2: *mut sqlite3,
                eTextRep: libc::c_int,
                arg3: *const libc::c_void,
            ),
        >,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_sleep(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_win32_set_directory(
        type_: libc::c_ulong,
        zValue: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_win32_set_directory8(
        type_: libc::c_ulong,
        zValue: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_win32_set_directory16(
        type_: libc::c_ulong,
        zValue: *const libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_get_autocommit(arg1: *mut sqlite3) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_db_handle(arg1: *mut sqlite3_stmt) -> *mut sqlite3;
}
extern "C" {
    pub fn sqlite3_db_filename(
        db: *mut sqlite3,
        zDbName: *const libc::c_char,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn sqlite3_db_readonly(db: *mut sqlite3, zDbName: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_next_stmt(pDb: *mut sqlite3, pStmt: *mut sqlite3_stmt) -> *mut sqlite3_stmt;
}
extern "C" {
    pub fn sqlite3_commit_hook(
        arg1: *mut sqlite3,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void) -> libc::c_int>,
        arg3: *mut libc::c_void,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn sqlite3_rollback_hook(
        arg1: *mut sqlite3,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        arg3: *mut libc::c_void,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn sqlite3_update_hook(
        arg1: *mut sqlite3,
        arg2: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut libc::c_void,
                arg2: libc::c_int,
                arg3: *const libc::c_char,
                arg4: *const libc::c_char,
                arg5: sqlite3_int64,
            ),
        >,
        arg3: *mut libc::c_void,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn sqlite3_enable_shared_cache(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_release_memory(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_db_release_memory(arg1: *mut sqlite3) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_soft_heap_limit64(N: sqlite3_int64) -> sqlite3_int64;
}
extern "C" {
    pub fn sqlite3_soft_heap_limit(N: libc::c_int);
}
extern "C" {
    pub fn sqlite3_table_column_metadata(
        db: *mut sqlite3,
        zDbName: *const libc::c_char,
        zTableName: *const libc::c_char,
        zColumnName: *const libc::c_char,
        pzDataType: *mut *const libc::c_char,
        pzCollSeq: *mut *const libc::c_char,
        pNotNull: *mut libc::c_int,
        pPrimaryKey: *mut libc::c_int,
        pAutoinc: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_load_extension(
        db: *mut sqlite3,
        zFile: *const libc::c_char,
        zProc: *const libc::c_char,
        pzErrMsg: *mut *mut libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_enable_load_extension(db: *mut sqlite3, onoff: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_auto_extension(
        xEntryPoint: ::core::option::Option<unsafe extern "C" fn()>,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_cancel_auto_extension(
        xEntryPoint: ::core::option::Option<unsafe extern "C" fn()>,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_reset_auto_extension();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_module {
    pub iVersion: libc::c_int,
    pub xCreate: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            pAux: *mut libc::c_void,
            argc: libc::c_int,
            argv: *const *const libc::c_char,
            ppVTab: *mut *mut sqlite3_vtab,
            arg2: *mut *mut libc::c_char,
        ) -> libc::c_int,
    >,
    pub xConnect: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            pAux: *mut libc::c_void,
            argc: libc::c_int,
            argv: *const *const libc::c_char,
            ppVTab: *mut *mut sqlite3_vtab,
            arg2: *mut *mut libc::c_char,
        ) -> libc::c_int,
    >,
    pub xBestIndex: ::core::option::Option<
        unsafe extern "C" fn(
            pVTab: *mut sqlite3_vtab,
            arg1: *mut sqlite3_index_info,
        ) -> libc::c_int,
    >,
    pub xDisconnect:
        ::core::option::Option<unsafe extern "C" fn(pVTab: *mut sqlite3_vtab) -> libc::c_int>,
    pub xDestroy:
        ::core::option::Option<unsafe extern "C" fn(pVTab: *mut sqlite3_vtab) -> libc::c_int>,
    pub xOpen: ::core::option::Option<
        unsafe extern "C" fn(
            pVTab: *mut sqlite3_vtab,
            ppCursor: *mut *mut sqlite3_vtab_cursor,
        ) -> libc::c_int,
    >,
    pub xClose:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_vtab_cursor) -> libc::c_int>,
    pub xFilter: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vtab_cursor,
            idxNum: libc::c_int,
            idxStr: *const libc::c_char,
            argc: libc::c_int,
            argv: *mut *mut sqlite3_value,
        ) -> libc::c_int,
    >,
    pub xNext:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_vtab_cursor) -> libc::c_int>,
    pub xEof:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_vtab_cursor) -> libc::c_int>,
    pub xColumn: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vtab_cursor,
            arg2: *mut sqlite3_context,
            arg3: libc::c_int,
        ) -> libc::c_int,
    >,
    pub xRowid: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vtab_cursor,
            pRowid: *mut sqlite3_int64,
        ) -> libc::c_int,
    >,
    pub xUpdate: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vtab,
            arg2: libc::c_int,
            arg3: *mut *mut sqlite3_value,
            arg4: *mut sqlite3_int64,
        ) -> libc::c_int,
    >,
    pub xBegin:
        ::core::option::Option<unsafe extern "C" fn(pVTab: *mut sqlite3_vtab) -> libc::c_int>,
    pub xSync:
        ::core::option::Option<unsafe extern "C" fn(pVTab: *mut sqlite3_vtab) -> libc::c_int>,
    pub xCommit:
        ::core::option::Option<unsafe extern "C" fn(pVTab: *mut sqlite3_vtab) -> libc::c_int>,
    pub xRollback:
        ::core::option::Option<unsafe extern "C" fn(pVTab: *mut sqlite3_vtab) -> libc::c_int>,
    pub xFindFunction: ::core::option::Option<
        unsafe extern "C" fn(
            pVtab: *mut sqlite3_vtab,
            nArg: libc::c_int,
            zName: *const libc::c_char,
            pxFunc: *mut ::core::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut sqlite3_context,
                    arg2: libc::c_int,
                    arg3: *mut *mut sqlite3_value,
                ),
            >,
            ppArg: *mut *mut libc::c_void,
        ) -> libc::c_int,
    >,
    pub xRename: ::core::option::Option<
        unsafe extern "C" fn(pVtab: *mut sqlite3_vtab, zNew: *const libc::c_char) -> libc::c_int,
    >,
    pub xSavepoint: ::core::option::Option<
        unsafe extern "C" fn(pVTab: *mut sqlite3_vtab, arg1: libc::c_int) -> libc::c_int,
    >,
    pub xRelease: ::core::option::Option<
        unsafe extern "C" fn(pVTab: *mut sqlite3_vtab, arg1: libc::c_int) -> libc::c_int,
    >,
    pub xRollbackTo: ::core::option::Option<
        unsafe extern "C" fn(pVTab: *mut sqlite3_vtab, arg1: libc::c_int) -> libc::c_int,
    >,
    pub xShadowName:
        ::core::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char) -> libc::c_int>,
}
#[test]
fn bindgen_test_layout_sqlite3_module() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_module>(),
        192usize,
        concat!("Size of: ", stringify!(sqlite3_module))
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_module>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_module))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).iVersion as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(iVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xCreate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xCreate)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xConnect as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xConnect)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xBestIndex as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xBestIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xDisconnect as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xDisconnect)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xDestroy as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xDestroy)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xOpen as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xOpen)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xClose as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xClose)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xFilter as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xFilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xNext as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xEof as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xEof)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xColumn as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xColumn)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xRowid as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xRowid)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xUpdate as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xBegin as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xSync as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xSync)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xCommit as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xCommit)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xRollback as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xRollback)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xFindFunction as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xFindFunction)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xRename as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xRename)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xSavepoint as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xSavepoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xRelease as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xRelease)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xRollbackTo as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xRollbackTo)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_module>())).xShadowName as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_module),
            "::",
            stringify!(xShadowName)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_index_info {
    pub nConstraint: libc::c_int,
    pub aConstraint: *mut sqlite3_index_info_sqlite3_index_constraint,
    pub nOrderBy: libc::c_int,
    pub aOrderBy: *mut sqlite3_index_info_sqlite3_index_orderby,
    pub aConstraintUsage: *mut sqlite3_index_info_sqlite3_index_constraint_usage,
    pub idxNum: libc::c_int,
    pub idxStr: *mut libc::c_char,
    pub needToFreeIdxStr: libc::c_int,
    pub orderByConsumed: libc::c_int,
    pub estimatedCost: f64,
    pub estimatedRows: sqlite3_int64,
    pub idxFlags: libc::c_int,
    pub colUsed: sqlite3_uint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_index_info_sqlite3_index_constraint {
    pub iColumn: libc::c_int,
    pub op: libc::c_uchar,
    pub usable: libc::c_uchar,
    pub iTermOffset: libc::c_int,
}
#[test]
fn bindgen_test_layout_sqlite3_index_info_sqlite3_index_constraint() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_index_info_sqlite3_index_constraint>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(sqlite3_index_info_sqlite3_index_constraint)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_index_info_sqlite3_index_constraint>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(sqlite3_index_info_sqlite3_index_constraint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_index_info_sqlite3_index_constraint>())).iColumn
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info_sqlite3_index_constraint),
            "::",
            stringify!(iColumn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_index_info_sqlite3_index_constraint>())).op as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info_sqlite3_index_constraint),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_index_info_sqlite3_index_constraint>())).usable
                as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info_sqlite3_index_constraint),
            "::",
            stringify!(usable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_index_info_sqlite3_index_constraint>())).iTermOffset
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info_sqlite3_index_constraint),
            "::",
            stringify!(iTermOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_index_info_sqlite3_index_orderby {
    pub iColumn: libc::c_int,
    pub desc: libc::c_uchar,
}
#[test]
fn bindgen_test_layout_sqlite3_index_info_sqlite3_index_orderby() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_index_info_sqlite3_index_orderby>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(sqlite3_index_info_sqlite3_index_orderby)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_index_info_sqlite3_index_orderby>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(sqlite3_index_info_sqlite3_index_orderby)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_index_info_sqlite3_index_orderby>())).iColumn
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info_sqlite3_index_orderby),
            "::",
            stringify!(iColumn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_index_info_sqlite3_index_orderby>())).desc as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info_sqlite3_index_orderby),
            "::",
            stringify!(desc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_index_info_sqlite3_index_constraint_usage {
    pub argvIndex: libc::c_int,
    pub omit: libc::c_uchar,
}
#[test]
fn bindgen_test_layout_sqlite3_index_info_sqlite3_index_constraint_usage() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_index_info_sqlite3_index_constraint_usage>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(sqlite3_index_info_sqlite3_index_constraint_usage)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_index_info_sqlite3_index_constraint_usage>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(sqlite3_index_info_sqlite3_index_constraint_usage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_index_info_sqlite3_index_constraint_usage>())).argvIndex
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info_sqlite3_index_constraint_usage),
            "::",
            stringify!(argvIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_index_info_sqlite3_index_constraint_usage>())).omit
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info_sqlite3_index_constraint_usage),
            "::",
            stringify!(omit)
        )
    );
}
#[test]
fn bindgen_test_layout_sqlite3_index_info() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_index_info>(),
        96usize,
        concat!("Size of: ", stringify!(sqlite3_index_info))
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_index_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_index_info))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_index_info>())).nConstraint as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info),
            "::",
            stringify!(nConstraint)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_index_info>())).aConstraint as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info),
            "::",
            stringify!(aConstraint)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_index_info>())).nOrderBy as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info),
            "::",
            stringify!(nOrderBy)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_index_info>())).aOrderBy as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info),
            "::",
            stringify!(aOrderBy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_index_info>())).aConstraintUsage as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info),
            "::",
            stringify!(aConstraintUsage)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_index_info>())).idxNum as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info),
            "::",
            stringify!(idxNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_index_info>())).idxStr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info),
            "::",
            stringify!(idxStr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_index_info>())).needToFreeIdxStr as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info),
            "::",
            stringify!(needToFreeIdxStr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_index_info>())).orderByConsumed as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info),
            "::",
            stringify!(orderByConsumed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_index_info>())).estimatedCost as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info),
            "::",
            stringify!(estimatedCost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_index_info>())).estimatedRows as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info),
            "::",
            stringify!(estimatedRows)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_index_info>())).idxFlags as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info),
            "::",
            stringify!(idxFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_index_info>())).colUsed as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_index_info),
            "::",
            stringify!(colUsed)
        )
    );
}
extern "C" {
    pub fn sqlite3_create_module(
        db: *mut sqlite3,
        zName: *const libc::c_char,
        p: *const sqlite3_module,
        pClientData: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_create_module_v2(
        db: *mut sqlite3,
        zName: *const libc::c_char,
        p: *const sqlite3_module,
        pClientData: *mut libc::c_void,
        xDestroy: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_vtab {
    pub pModule: *const sqlite3_module,
    pub nRef: libc::c_int,
    pub zErrMsg: *mut libc::c_char,
}
#[test]
fn bindgen_test_layout_sqlite3_vtab() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_vtab>(),
        24usize,
        concat!("Size of: ", stringify!(sqlite3_vtab))
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_vtab>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_vtab))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vtab>())).pModule as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vtab),
            "::",
            stringify!(pModule)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vtab>())).nRef as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vtab),
            "::",
            stringify!(nRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vtab>())).zErrMsg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vtab),
            "::",
            stringify!(zErrMsg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_vtab_cursor {
    pub pVtab: *mut sqlite3_vtab,
}
#[test]
fn bindgen_test_layout_sqlite3_vtab_cursor() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_vtab_cursor>(),
        8usize,
        concat!("Size of: ", stringify!(sqlite3_vtab_cursor))
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_vtab_cursor>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_vtab_cursor))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_vtab_cursor>())).pVtab as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_vtab_cursor),
            "::",
            stringify!(pVtab)
        )
    );
}
extern "C" {
    pub fn sqlite3_declare_vtab(arg1: *mut sqlite3, zSQL: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_overload_function(
        arg1: *mut sqlite3,
        zFuncName: *const libc::c_char,
        nArg: libc::c_int,
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_blob {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sqlite3_blob_open(
        arg1: *mut sqlite3,
        zDb: *const libc::c_char,
        zTable: *const libc::c_char,
        zColumn: *const libc::c_char,
        iRow: sqlite3_int64,
        flags: libc::c_int,
        ppBlob: *mut *mut sqlite3_blob,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_blob_reopen(arg1: *mut sqlite3_blob, arg2: sqlite3_int64) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_blob_close(arg1: *mut sqlite3_blob) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_blob_bytes(arg1: *mut sqlite3_blob) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_blob_read(
        arg1: *mut sqlite3_blob,
        Z: *mut libc::c_void,
        N: libc::c_int,
        iOffset: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_blob_write(
        arg1: *mut sqlite3_blob,
        z: *const libc::c_void,
        n: libc::c_int,
        iOffset: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_vfs_find(zVfsName: *const libc::c_char) -> *mut sqlite3_vfs;
}
extern "C" {
    pub fn sqlite3_vfs_register(arg1: *mut sqlite3_vfs, makeDflt: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_vfs_unregister(arg1: *mut sqlite3_vfs) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_mutex_alloc(arg1: libc::c_int) -> *mut sqlite3_mutex;
}
extern "C" {
    pub fn sqlite3_mutex_free(arg1: *mut sqlite3_mutex);
}
extern "C" {
    pub fn sqlite3_mutex_enter(arg1: *mut sqlite3_mutex);
}
extern "C" {
    pub fn sqlite3_mutex_try(arg1: *mut sqlite3_mutex) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_mutex_leave(arg1: *mut sqlite3_mutex);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_mutex_methods {
    pub xMutexInit: ::core::option::Option<unsafe extern "C" fn() -> libc::c_int>,
    pub xMutexEnd: ::core::option::Option<unsafe extern "C" fn() -> libc::c_int>,
    pub xMutexAlloc:
        ::core::option::Option<unsafe extern "C" fn(arg1: libc::c_int) -> *mut sqlite3_mutex>,
    pub xMutexFree: ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_mutex)>,
    pub xMutexEnter: ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_mutex)>,
    pub xMutexTry:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_mutex) -> libc::c_int>,
    pub xMutexLeave: ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_mutex)>,
    pub xMutexHeld:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_mutex) -> libc::c_int>,
    pub xMutexNotheld:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_mutex) -> libc::c_int>,
}
#[test]
fn bindgen_test_layout_sqlite3_mutex_methods() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_mutex_methods>(),
        72usize,
        concat!("Size of: ", stringify!(sqlite3_mutex_methods))
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_mutex_methods>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_mutex_methods))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_mutex_methods>())).xMutexInit as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mutex_methods),
            "::",
            stringify!(xMutexInit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_mutex_methods>())).xMutexEnd as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mutex_methods),
            "::",
            stringify!(xMutexEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_mutex_methods>())).xMutexAlloc as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mutex_methods),
            "::",
            stringify!(xMutexAlloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_mutex_methods>())).xMutexFree as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mutex_methods),
            "::",
            stringify!(xMutexFree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_mutex_methods>())).xMutexEnter as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mutex_methods),
            "::",
            stringify!(xMutexEnter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_mutex_methods>())).xMutexTry as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mutex_methods),
            "::",
            stringify!(xMutexTry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_mutex_methods>())).xMutexLeave as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mutex_methods),
            "::",
            stringify!(xMutexLeave)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_mutex_methods>())).xMutexHeld as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mutex_methods),
            "::",
            stringify!(xMutexHeld)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_mutex_methods>())).xMutexNotheld as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_mutex_methods),
            "::",
            stringify!(xMutexNotheld)
        )
    );
}
extern "C" {
    pub fn sqlite3_mutex_held(arg1: *mut sqlite3_mutex) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_mutex_notheld(arg1: *mut sqlite3_mutex) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_db_mutex(arg1: *mut sqlite3) -> *mut sqlite3_mutex;
}
extern "C" {
    pub fn sqlite3_file_control(
        arg1: *mut sqlite3,
        zDbName: *const libc::c_char,
        op: libc::c_int,
        arg2: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_test_control(op: libc::c_int, ...) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_keyword_count() -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_keyword_name(
        arg1: libc::c_int,
        arg2: *mut *const libc::c_char,
        arg3: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_keyword_check(arg1: *const libc::c_char, arg2: libc::c_int) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_str {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sqlite3_str_new(arg1: *mut sqlite3) -> *mut sqlite3_str;
}
extern "C" {
    pub fn sqlite3_str_finish(arg1: *mut sqlite3_str) -> *mut libc::c_char;
}
extern "C" {
    pub fn sqlite3_str_appendf(arg1: *mut sqlite3_str, zFormat: *const libc::c_char, ...);
}
extern "C" {
    pub fn sqlite3_str_vappendf(
        arg1: *mut sqlite3_str,
        zFormat: *const libc::c_char,
        arg2: va_list,
    );
}
extern "C" {
    pub fn sqlite3_str_append(arg1: *mut sqlite3_str, zIn: *const libc::c_char, N: libc::c_int);
}
extern "C" {
    pub fn sqlite3_str_appendall(arg1: *mut sqlite3_str, zIn: *const libc::c_char);
}
extern "C" {
    pub fn sqlite3_str_appendchar(arg1: *mut sqlite3_str, N: libc::c_int, C: libc::c_char);
}
extern "C" {
    pub fn sqlite3_str_reset(arg1: *mut sqlite3_str);
}
extern "C" {
    pub fn sqlite3_str_errcode(arg1: *mut sqlite3_str) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_str_length(arg1: *mut sqlite3_str) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_str_value(arg1: *mut sqlite3_str) -> *mut libc::c_char;
}
extern "C" {
    pub fn sqlite3_status(
        op: libc::c_int,
        pCurrent: *mut libc::c_int,
        pHighwater: *mut libc::c_int,
        resetFlag: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_status64(
        op: libc::c_int,
        pCurrent: *mut sqlite3_int64,
        pHighwater: *mut sqlite3_int64,
        resetFlag: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_db_status(
        arg1: *mut sqlite3,
        op: libc::c_int,
        pCur: *mut libc::c_int,
        pHiwtr: *mut libc::c_int,
        resetFlg: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_stmt_status(
        arg1: *mut sqlite3_stmt,
        op: libc::c_int,
        resetFlg: libc::c_int,
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_pcache {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_pcache_page {
    pub pBuf: *mut libc::c_void,
    pub pExtra: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout_sqlite3_pcache_page() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_pcache_page>(),
        16usize,
        concat!("Size of: ", stringify!(sqlite3_pcache_page))
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_pcache_page>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_pcache_page))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_pcache_page>())).pBuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_page),
            "::",
            stringify!(pBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_pcache_page>())).pExtra as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_page),
            "::",
            stringify!(pExtra)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_pcache_methods2 {
    pub iVersion: libc::c_int,
    pub pArg: *mut libc::c_void,
    pub xInit: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void) -> libc::c_int>,
    pub xShutdown: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    pub xCreate: ::core::option::Option<
        unsafe extern "C" fn(
            szPage: libc::c_int,
            szExtra: libc::c_int,
            bPurgeable: libc::c_int,
        ) -> *mut sqlite3_pcache,
    >,
    pub xCachesize: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_pcache, nCachesize: libc::c_int),
    >,
    pub xPagecount:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_pcache) -> libc::c_int>,
    pub xFetch: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_pcache,
            key: libc::c_uint,
            createFlag: libc::c_int,
        ) -> *mut sqlite3_pcache_page,
    >,
    pub xUnpin: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_pcache,
            arg2: *mut sqlite3_pcache_page,
            discard: libc::c_int,
        ),
    >,
    pub xRekey: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_pcache,
            arg2: *mut sqlite3_pcache_page,
            oldKey: libc::c_uint,
            newKey: libc::c_uint,
        ),
    >,
    pub xTruncate: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_pcache, iLimit: libc::c_uint),
    >,
    pub xDestroy: ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_pcache)>,
    pub xShrink: ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_pcache)>,
}
#[test]
fn bindgen_test_layout_sqlite3_pcache_methods2() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_pcache_methods2>(),
        104usize,
        concat!("Size of: ", stringify!(sqlite3_pcache_methods2))
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_pcache_methods2>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_pcache_methods2))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_pcache_methods2>())).iVersion as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods2),
            "::",
            stringify!(iVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_pcache_methods2>())).pArg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods2),
            "::",
            stringify!(pArg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_pcache_methods2>())).xInit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods2),
            "::",
            stringify!(xInit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_pcache_methods2>())).xShutdown as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods2),
            "::",
            stringify!(xShutdown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_pcache_methods2>())).xCreate as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods2),
            "::",
            stringify!(xCreate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_pcache_methods2>())).xCachesize as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods2),
            "::",
            stringify!(xCachesize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_pcache_methods2>())).xPagecount as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods2),
            "::",
            stringify!(xPagecount)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_pcache_methods2>())).xFetch as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods2),
            "::",
            stringify!(xFetch)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_pcache_methods2>())).xUnpin as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods2),
            "::",
            stringify!(xUnpin)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_pcache_methods2>())).xRekey as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods2),
            "::",
            stringify!(xRekey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_pcache_methods2>())).xTruncate as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods2),
            "::",
            stringify!(xTruncate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_pcache_methods2>())).xDestroy as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods2),
            "::",
            stringify!(xDestroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_pcache_methods2>())).xShrink as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods2),
            "::",
            stringify!(xShrink)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_pcache_methods {
    pub pArg: *mut libc::c_void,
    pub xInit: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void) -> libc::c_int>,
    pub xShutdown: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    pub xCreate: ::core::option::Option<
        unsafe extern "C" fn(szPage: libc::c_int, bPurgeable: libc::c_int) -> *mut sqlite3_pcache,
    >,
    pub xCachesize: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_pcache, nCachesize: libc::c_int),
    >,
    pub xPagecount:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_pcache) -> libc::c_int>,
    pub xFetch: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_pcache,
            key: libc::c_uint,
            createFlag: libc::c_int,
        ) -> *mut libc::c_void,
    >,
    pub xUnpin: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_pcache,
            arg2: *mut libc::c_void,
            discard: libc::c_int,
        ),
    >,
    pub xRekey: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_pcache,
            arg2: *mut libc::c_void,
            oldKey: libc::c_uint,
            newKey: libc::c_uint,
        ),
    >,
    pub xTruncate: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_pcache, iLimit: libc::c_uint),
    >,
    pub xDestroy: ::core::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_pcache)>,
}
#[test]
fn bindgen_test_layout_sqlite3_pcache_methods() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_pcache_methods>(),
        88usize,
        concat!("Size of: ", stringify!(sqlite3_pcache_methods))
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_pcache_methods>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_pcache_methods))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_pcache_methods>())).pArg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods),
            "::",
            stringify!(pArg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_pcache_methods>())).xInit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods),
            "::",
            stringify!(xInit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_pcache_methods>())).xShutdown as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods),
            "::",
            stringify!(xShutdown)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_pcache_methods>())).xCreate as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods),
            "::",
            stringify!(xCreate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_pcache_methods>())).xCachesize as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods),
            "::",
            stringify!(xCachesize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_pcache_methods>())).xPagecount as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods),
            "::",
            stringify!(xPagecount)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_pcache_methods>())).xFetch as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods),
            "::",
            stringify!(xFetch)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_pcache_methods>())).xUnpin as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods),
            "::",
            stringify!(xUnpin)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_pcache_methods>())).xRekey as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods),
            "::",
            stringify!(xRekey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_pcache_methods>())).xTruncate as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods),
            "::",
            stringify!(xTruncate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_pcache_methods>())).xDestroy as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_pcache_methods),
            "::",
            stringify!(xDestroy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_backup {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sqlite3_backup_init(
        pDest: *mut sqlite3,
        zDestName: *const libc::c_char,
        pSource: *mut sqlite3,
        zSourceName: *const libc::c_char,
    ) -> *mut sqlite3_backup;
}
extern "C" {
    pub fn sqlite3_backup_step(p: *mut sqlite3_backup, nPage: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_backup_finish(p: *mut sqlite3_backup) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_backup_remaining(p: *mut sqlite3_backup) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_backup_pagecount(p: *mut sqlite3_backup) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_unlock_notify(
        pBlocked: *mut sqlite3,
        xNotify: ::core::option::Option<
            unsafe extern "C" fn(apArg: *mut *mut libc::c_void, nArg: libc::c_int),
        >,
        pNotifyArg: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_stricmp(arg1: *const libc::c_char, arg2: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_strnicmp(
        arg1: *const libc::c_char,
        arg2: *const libc::c_char,
        arg3: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_strglob(zGlob: *const libc::c_char, zStr: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_strlike(
        zGlob: *const libc::c_char,
        zStr: *const libc::c_char,
        cEsc: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_log(iErrCode: libc::c_int, zFormat: *const libc::c_char, ...);
}
extern "C" {
    pub fn sqlite3_wal_hook(
        arg1: *mut sqlite3,
        arg2: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut libc::c_void,
                arg2: *mut sqlite3,
                arg3: *const libc::c_char,
                arg4: libc::c_int,
            ) -> libc::c_int,
        >,
        arg3: *mut libc::c_void,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn sqlite3_wal_autocheckpoint(db: *mut sqlite3, N: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_wal_checkpoint(db: *mut sqlite3, zDb: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_wal_checkpoint_v2(
        db: *mut sqlite3,
        zDb: *const libc::c_char,
        eMode: libc::c_int,
        pnLog: *mut libc::c_int,
        pnCkpt: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_vtab_config(arg1: *mut sqlite3, op: libc::c_int, ...) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_vtab_on_conflict(arg1: *mut sqlite3) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_vtab_nochange(arg1: *mut sqlite3_context) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_vtab_collation(
        arg1: *mut sqlite3_index_info,
        arg2: libc::c_int,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn sqlite3_stmt_scanstatus(
        pStmt: *mut sqlite3_stmt,
        idx: libc::c_int,
        iScanStatusOp: libc::c_int,
        pOut: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_stmt_scanstatus_reset(arg1: *mut sqlite3_stmt);
}
extern "C" {
    pub fn sqlite3_db_cacheflush(arg1: *mut sqlite3) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_system_errno(arg1: *mut sqlite3) -> libc::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sqlite3_snapshot {
    pub hidden: [libc::c_uchar; 48usize],
}
#[test]
fn bindgen_test_layout_sqlite3_snapshot() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_snapshot>(),
        48usize,
        concat!("Size of: ", stringify!(sqlite3_snapshot))
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_snapshot>(),
        1usize,
        concat!("Alignment of ", stringify!(sqlite3_snapshot))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_snapshot>())).hidden as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_snapshot),
            "::",
            stringify!(hidden)
        )
    );
}
extern "C" {
    pub fn sqlite3_snapshot_get(
        db: *mut sqlite3,
        zSchema: *const libc::c_char,
        ppSnapshot: *mut *mut sqlite3_snapshot,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_snapshot_open(
        db: *mut sqlite3,
        zSchema: *const libc::c_char,
        pSnapshot: *mut sqlite3_snapshot,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_snapshot_free(arg1: *mut sqlite3_snapshot);
}
extern "C" {
    pub fn sqlite3_snapshot_cmp(
        p1: *mut sqlite3_snapshot,
        p2: *mut sqlite3_snapshot,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_snapshot_recover(db: *mut sqlite3, zDb: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_wal_info(
        db: *mut sqlite3,
        zDb: *const libc::c_char,
        pnPrior: *mut libc::c_uint,
        pnFrame: *mut libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sqlite3_serialize(
        db: *mut sqlite3,
        zSchema: *const libc::c_char,
        piSize: *mut sqlite3_int64,
        mFlags: libc::c_uint,
    ) -> *mut libc::c_uchar;
}
extern "C" {
    pub fn sqlite3_deserialize(
        db: *mut sqlite3,
        zSchema: *const libc::c_char,
        pData: *mut libc::c_uchar,
        szDb: sqlite3_int64,
        szBuf: sqlite3_int64,
        mFlags: libc::c_uint,
    ) -> libc::c_int;
}
pub type sqlite3_rtree_dbl = f64;
extern "C" {
    pub fn sqlite3_rtree_geometry_callback(
        db: *mut sqlite3,
        zGeom: *const libc::c_char,
        xGeom: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut sqlite3_rtree_geometry,
                arg2: libc::c_int,
                arg3: *mut sqlite3_rtree_dbl,
                arg4: *mut libc::c_int,
            ) -> libc::c_int,
        >,
        pContext: *mut libc::c_void,
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_rtree_geometry {
    pub pContext: *mut libc::c_void,
    pub nParam: libc::c_int,
    pub aParam: *mut sqlite3_rtree_dbl,
    pub pUser: *mut libc::c_void,
    pub xDelUser: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
}
#[test]
fn bindgen_test_layout_sqlite3_rtree_geometry() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_rtree_geometry>(),
        40usize,
        concat!("Size of: ", stringify!(sqlite3_rtree_geometry))
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_rtree_geometry>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_rtree_geometry))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_geometry>())).pContext as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_geometry),
            "::",
            stringify!(pContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_rtree_geometry>())).nParam as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_geometry),
            "::",
            stringify!(nParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_rtree_geometry>())).aParam as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_geometry),
            "::",
            stringify!(aParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_rtree_geometry>())).pUser as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_geometry),
            "::",
            stringify!(pUser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_geometry>())).xDelUser as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_geometry),
            "::",
            stringify!(xDelUser)
        )
    );
}
extern "C" {
    pub fn sqlite3_rtree_query_callback(
        db: *mut sqlite3,
        zQueryFunc: *const libc::c_char,
        xQueryFunc: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut sqlite3_rtree_query_info) -> libc::c_int,
        >,
        pContext: *mut libc::c_void,
        xDestructor: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_rtree_query_info {
    pub pContext: *mut libc::c_void,
    pub nParam: libc::c_int,
    pub aParam: *mut sqlite3_rtree_dbl,
    pub pUser: *mut libc::c_void,
    pub xDelUser: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    pub aCoord: *mut sqlite3_rtree_dbl,
    pub anQueue: *mut libc::c_uint,
    pub nCoord: libc::c_int,
    pub iLevel: libc::c_int,
    pub mxLevel: libc::c_int,
    pub iRowid: sqlite3_int64,
    pub rParentScore: sqlite3_rtree_dbl,
    pub eParentWithin: libc::c_int,
    pub eWithin: libc::c_int,
    pub rScore: sqlite3_rtree_dbl,
    pub apSqlParam: *mut *mut sqlite3_value,
}
#[test]
fn bindgen_test_layout_sqlite3_rtree_query_info() {
    assert_eq!(
        ::core::mem::size_of::<sqlite3_rtree_query_info>(),
        112usize,
        concat!("Size of: ", stringify!(sqlite3_rtree_query_info))
    );
    assert_eq!(
        ::core::mem::align_of::<sqlite3_rtree_query_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_rtree_query_info))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_query_info>())).pContext as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_query_info),
            "::",
            stringify!(pContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_query_info>())).nParam as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_query_info),
            "::",
            stringify!(nParam)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_query_info>())).aParam as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_query_info),
            "::",
            stringify!(aParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sqlite3_rtree_query_info>())).pUser as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_query_info),
            "::",
            stringify!(pUser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_query_info>())).xDelUser as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_query_info),
            "::",
            stringify!(xDelUser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_query_info>())).aCoord as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_query_info),
            "::",
            stringify!(aCoord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_query_info>())).anQueue as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_query_info),
            "::",
            stringify!(anQueue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_query_info>())).nCoord as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_query_info),
            "::",
            stringify!(nCoord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_query_info>())).iLevel as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_query_info),
            "::",
            stringify!(iLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_query_info>())).mxLevel as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_query_info),
            "::",
            stringify!(mxLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_query_info>())).iRowid as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_query_info),
            "::",
            stringify!(iRowid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_query_info>())).rParentScore as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_query_info),
            "::",
            stringify!(rParentScore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_query_info>())).eParentWithin as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_query_info),
            "::",
            stringify!(eParentWithin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_query_info>())).eWithin as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_query_info),
            "::",
            stringify!(eWithin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_query_info>())).rScore as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_query_info),
            "::",
            stringify!(rScore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sqlite3_rtree_query_info>())).apSqlParam as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sqlite3_rtree_query_info),
            "::",
            stringify!(apSqlParam)
        )
    );
}
pub type __builtin_va_list = *mut libc::c_char;
